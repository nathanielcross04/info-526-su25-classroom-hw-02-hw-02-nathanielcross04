---
title: "HW 02"
subtitle: "INFO 526: Summer 2025"
author: "Nathaniel Cross"
date: 2025-06-02
format: 
  html:
    embed-resources: true
toc: true
---

## 0 - Setup

```{r setup}

# install and load packages
if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse, 
               glue,
               scales,
               countdown,
               ggthemes,
               gt,
               palmerpenguins,
               openintro,
               ggrepel,
               patchwork,
               quantreg,
               janitor,
               colorspace,
               broom,
               fs,
               here,
               openintro,
               gghighlight,
               lubridate,
               dsbox,
               ggridges
               )

devtools::install_github("tidyverse/dsbox")

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
```

## 1 - A new day, a new plot, a new geom

```{r q1}

# loading the data
edibnb <- edibnb |>
  glimpse()

# wrangling
tapply(edibnb$review_scores_rating, edibnb$neighbourhood, summary) # Source: BenBarnes (StackOverflow)

edibnb_wrangle <- edibnb |>
  mutate(
  neighbourhood = fct_relevel(neighbourhood, "Morningside", "Bruntsfield", "Stockbridge", "Cannonmills", "New Town", "Leith", "Marchmont", "West End", "Haymarket", "Old Town", "Newington", "Tollcross", "Southside")
)

# plot
edibnb_wrangle |>
  filter(!is.na(neighbourhood)) |>
  ggplot(aes(x = review_scores_rating, y = neighbourhood)) +
  geom_density_ridges(scale = 1.5, fill = "deepskyblue3") + 
  labs(
    x = "Rating",
    y = NULL,
    title = "Ratings of Edinburgh Airbnbs",
    subtitle = "By neighborhood"
  ) +
  coord_cartesian(clip = "off") +
  theme(
    plot.title.position = "plot"
  ) +
  theme_ridges()
```

In interpreting this plot, one finds that most Airbnbs in Edinburgh are rated similarly, with high scores given to almost all properties. Ranked in order of descending median, we can interpret that certain neighborhoods like Bruntsfield and Morningside do receive higher ratings (median = 98), however variation between the best- and worst-ranked neighborhoods is minimal. Unfortunately, given the relative closeness of this data, a plot may not be the best tool to examine nuance in the dataset and a more traditional statistical summary might prove more useful.

## 2 - Foreign Connected PACs

```{r q2 data wrangling}

# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year")

# cleaning var names
pac <- pac |>
  janitor::clean_names()

# replace year obs with single year
pac$year[pac$year== "data/Foreign Connected PACs, 1999-2000.csv"] = "2000"
pac$year[pac$year== "data/Foreign Connected PACs, 2001-2002.csv"] = "2002"
pac$year[pac$year== "data/Foreign Connected PACs, 2003-2004.csv"] = "2004"
pac$year[pac$year== "data/Foreign Connected PACs, 2005-2006.csv"] = "2006"
pac$year[pac$year== "data/Foreign Connected PACs, 2007-2008.csv"] = "2008"
pac$year[pac$year== "data/Foreign Connected PACs, 2009-2010.csv"] = "2010"
pac$year[pac$year== "data/Foreign Connected PACs, 2011-2012.csv"] = "2012"
pac$year[pac$year== "data/Foreign Connected PACs, 2013-2014.csv"] = "2014"
pac$year[pac$year== "data/Foreign Connected PACs, 2015-2016.csv"] = "2016"
pac$year[pac$year== "data/Foreign Connected PACs, 2017-2018.csv"] = "2018"
pac$year[pac$year== "data/Foreign Connected PACs, 2019-2020.csv"] = "2020"
pac$year[pac$year== "data/Foreign Connected PACs, 2021-2022.csv"] = "2022" # Source: Geeks for Geeks (https://www.geeksforgeeks.org/replace-values-based-on-condition-in-r/)

pac$year |>
  unique()

# convert to integer
pac$year <- as.integer(pac$year) # Source: Geeks for Geeks (https://www.geeksforgeeks.org/convert-a-character-object-to-integer-in-r-programming-as-integer-function/)

pac |>
  glimpse()

# separate county/company of origin
pac <- pac |>
  separate(
  col = country_of_origin_parent_company, 
  sep = "/", 
  into = c("country_of_origin", "parent_company")
) # Source: rdr (Posit Forum)

# drop total donations
pac$total <- NULL

# dropping $
dems <- pac$dems
repubs <- pac$repubs

pac$dems <- gsub('[^[:alnum:] ]','', dems)
pac$repubs <- gsub('[^[:alnum:] ]','', repubs)

pac$dems <- as.double(pac$dems)
pac$repubs <- as.double(pac$repubs)

pac |>
  glimpse()

# rename party vars
names(pac)[names(pac) == "dems"] <- "Democrat"
names(pac)[names(pac) == "repubs"] <- "Republican" # Source: An Introduction to R for Research (https://bookdown.org/rwnahhas/IntroToR/rename.html)

# pivoting
pac <- pac |> 
  pivot_longer(
    cols = c(Democrat, Republican), 
    names_to = "party", 
    values_to = "amount"
  )

pac |>
  view()

# summary table
country_total <- pac |>
  filter(country_of_origin == "UK") |>
  group_by(year, party) |>
  summarise(country_total = sum(amount, na.rm = TRUE))

print(country_total)
```

```{r q2 plotting}

# plot recreation
country_total |>
  ggplot(aes(x = year, y = country_total, color = party)) +
  geom_line(linewidth = 1) +
  labs(
    x = "Year",
    y = "Total amount",
    title = "Contributions to US political parties from UK-connected PACs",
    color = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  scale_y_continuous(labels = label_dollar(scale = 1/1000000, suffix = "M")) +
  scale_color_manual(values = c("blue", "red")) +
  theme(axis.title = element_text(hjust = 0),
        text = element_text(size = 11),
        legend.position = c(0.9, 0.15)
        )
  
# new plot (different country)
france_total <- pac |>
  filter(country_of_origin == "France") |>
  group_by(year, party) |>
  summarise(country_total = sum(amount, na.rm = TRUE))

france_total |>
  ggplot(aes(x = year, y = country_total, color = party)) +
  geom_line(linewidth = 1) +
  labs(
    x = "Year",
    y = "Total amount",
    title = "Contributions to US political parties from France-connected PACs",
    color = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  scale_y_continuous(labels = label_dollar(scale = 1/1000000, suffix = "M")) +
  scale_color_manual(values = c("blue", "red")) +
  theme(axis.title = element_text(hjust = 0),
        text = element_text(size = 11),
        legend.position = c(0.9, 0.15)
        )
```

While donations from France-connected PACs to U.S. political parties are significantly lower than UK-connected PACs (max \$1M from France vs. \~\$3.5M from UK), the above plot mirrors the partisan support trend seen in the UK plot: PACs connected to both these countries favor the Republican party, and for the most part, donations are increasing over time. Most significantly is the spike in donations to the Republican party just after 2015 (likely for the 2016 election), which could reflect companies' favoring of Trump's supposedly prosperous economic policies. This rationale would also make sense given the sharp drop in donations to the Republican party following Trump's election and the revelation to the world of his lack of substantive economic policies.

## 3 - Median housing prices in the US

## 4 - Expect More. Plot More.

## 5 - Mirror, mirror on the wall, whoâ€™s the ugliest of them all?
